{"version":3,"sources":["Search.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","query","loading","sites","amount","okWithCookies","localStorage","getItem","cookieBanner","repoList","page","findLinks","bind","getUsers","loadLinks","acceptCookies","nextPage","backPage","this","setState","id","href","onClick","fetch","then","res","json","message","total_count","temp","i","items","length","push","full_name","catch","e","console","log","repo","re","blog","includes","concat","key","Math","round","random","className","src","avatar_url","alt","login","replace","setItem","next","back","repoTitle","link","style","type","placeholder","onInput","target","value","onKeyDown","keyCode","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2d63ea0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Search extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            query: \"\",\r\n            loading: \"\",\r\n            sites: [],\r\n            amount: 0,\r\n            okWithCookies: localStorage.getItem('okWithCookies'),\r\n            cookieBanner: \"\",\r\n            repoList: [],\r\n            page: -1\r\n        }\r\n        this.findLinks = this.findLinks.bind(this);\r\n        this.getUsers = this.getUsers.bind(this);\r\n        this.loadLinks = this.loadLinks.bind(this);\r\n        this.acceptCookies = this.acceptCookies.bind(this)\r\n        this.nextPage = this.nextPage.bind(this);\r\n        this.backPage = this.backPage.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (!this.state.okWithCookies) {\r\n            this.setState({cookieBanner: (<div id=\"cookie-banner\">\r\n            <p id=\"cookie-text\">By continuing the use of this site, you consent to the use of cookies as outlined in our <a id=\"privacy-link\" href=\"privacypolicy.html\">Privacy Policy</a>.</p>\r\n            <button id=\"agree\" onClick={this.acceptCookies}>Ok</button>\r\n        </div>)})\r\n        }\r\n    }\r\n\r\n    findLinks() {\r\n        this.setState({ sites: [] })\r\n        this.setState({ loading: \"Loading...\"} )\r\n        fetch(`https://techblogsearch.herokuapp.com/${this.state.query}`)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if (res.message) {\r\n                if (res.message === \"You pressed Go too many times. Chill out.\") {\r\n                    this.setState({sites: <div id=\"message\"><h3>{res.message}</h3></div>})\r\n                } else {\r\n                    this.setState({sites: <div id=\"message\"><h2>Github says: </h2><h3>{res.message}</h3></div>})\r\n                }\r\n                \r\n            } else {\r\n                if (res.total_count !== 0) {\r\n                    var temp = []\r\n                    for (var i = 0; i < res.items.length; i++) {\r\n                        temp.push(res.items[i].full_name)\r\n                    }\r\n                    this.setState({repoList: temp, page: 0});\r\n                    this.getUsers();\r\n                } else {\r\n                    this.setState({ loading: \"\"})\r\n                    this.setState({sites: <div id=\"message\"><h3>No results found.</h3></div>})\r\n                }\r\n            }\r\n            \r\n        })\r\n        .catch(e => {\r\n            console.log(e);\r\n            this.setState({ loading: \"Something went horribly wrong.\"})\r\n        });\r\n    }\r\n\r\n    getUsers() {\r\n        this.setState({ sites: [] })\r\n        this.setState({ loading: \"Loading...\"})\r\n        var repo = this.state.repoList[this.state.page];\r\n        fetch(`https://techblogsearch.herokuapp.com/${repo}`)\r\n        .then(res => res.json())\r\n        .then(res => {\r\n            if (res.length > 0) {\r\n                for (var i = 0; i < res.length; i++) {\r\n                    this.loadLinks(res[i])\r\n                }\r\n            } else {\r\n                this.setState({sites: <div id=\"message\"><h3>No blogs here.</h3></div>})\r\n            }\r\n            \r\n            this.setState({ loading: \"\"})\r\n        })\r\n        .catch(e => {\r\n            console.log(e);\r\n            this.setState({ loading: \"Something went horribly wrong.\"})\r\n        });\r\n    }\r\n\r\n    loadLinks(re) {\r\n        if (re.blog !== \"\" && !re.blog.includes(\"twitter\")) {\r\n            if (!re.blog.includes(\"http\")) {\r\n                re.blog = \"http://\" + re.blog;\r\n            }\r\n            this.setState({sites: this.state.sites.concat(\r\n                    <p key={Math.round(Math.random() * 10000)} className=\"cluster\" >\r\n                        <img href={re.blog} className=\"avatar\" src={re.avatar_url} alt={ \"github profile picture of \" + re.login } />\r\n                        <br></br>\r\n                        <a href={re.blog}>{ re.blog.replace('http://', '').replace('https://', '') }</a>\r\n                    </p>)\r\n                })\r\n        }\r\n    }\r\n\r\n    acceptCookies() {\r\n        localStorage.setItem('okWithCookies', true);\r\n        this.setState({ cookieBanner: \"\"});\r\n    }\r\n\r\n    nextPage() {\r\n        var next = this.state.page + 1;\r\n        this.setState({page : next}, () => this.getUsers())\r\n    }\r\n\r\n    backPage() {\r\n        var back = this.state.page - 1;\r\n        this.setState({page : back}, () => this.getUsers());\r\n    }\r\n    \r\n    render() {\r\n        var next = \"\";\r\n        var back = \"\";\r\n        if (this.state.page === 0) {\r\n            next = (<button onClick={this.nextPage}>Next</button>);\r\n            back = \"\";\r\n        }\r\n        if (this.state.page > 0) {\r\n            next = (<button onClick={this.nextPage}>Next</button>);\r\n            back = (<button onClick={this.backPage}>Back</button>);\r\n        } \r\n        if (this.state.page === this.state.repoList.length) {\r\n            next = \"\";\r\n            back = (<button onClick={this.backPage}>Back</button>)\r\n        }\r\n        var repoTitle = \"\";\r\n        var link = \"\";\r\n        if (this.state.repoList[this.state.page]) {\r\n            link = \"https://github.com/\" + this.state.repoList[this.state.page]\r\n            repoTitle = (<a href={link}>{this.state.repoList[this.state.page]}</a>)\r\n        }\r\n        return (\r\n            <>\r\n                <div id=\"search\">\r\n                    <div style={{\"display\":\"flex\", \"justifyContent\":\"center\"}}>\r\n                        <div id=\"header\">\r\n                            <a id=\"about\" href=\"about.html\">about</a>\r\n                            \r\n                            <h2 style={{ \"color\": \"yellowgreen\", \"margin\":\"0\" }}>techblogsearch</h2>\r\n                        \r\n                            <a id=\"privacy\" href=\"privacypolicy.html\">privacy and cookie policy</a>\r\n                        </div>\r\n                    </div>\r\n                        \r\n                    <div className=\"press\">\r\n                        <input type=\"text\" placeholder=\"search\" onInput={e => this.setState({ query: e.target.value })} onKeyDown={e => { if (e.keyCode === 13) this.findLinks() }}/>\r\n                        <button onClick={this.findLinks}>Go</button>\r\n                    </div>\r\n                </div>\r\n                <br></br>\r\n                <h3><div id=\"message\"><h3>{repoTitle}</h3></div></h3>\r\n                <h1 id=\"loading\">{ this.state.loading }</h1>\r\n                <div>{ this.state.sites }</div>\r\n                <div id=\"navi\">{ back }{ next }</div>\r\n                { this.state.cookieBanner }\r\n            </>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Search from './Search.js';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Search />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}