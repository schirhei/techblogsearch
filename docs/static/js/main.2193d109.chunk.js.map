{"version":3,"sources":["Search.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","repo","loading","sites","amount","okWithCookies","localStorage","getItem","cookieBanner","findLinks","bind","loadLinks","acceptCookies","this","setState","id","href","onClick","fetch","then","res","json","message","i","length","catch","e","console","log","re","blog","includes","concat","key","Math","round","random","className","src","avatar_url","alt","login","replace","setItem","style","type","placeholder","onInput","target","value","onKeyDown","keyCode","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8PAEqBA,E,YACjB,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,KAAM,GACNC,QAAS,GACTC,MAAO,GACPC,OAAQ,EACRC,cAAeC,aAAaC,QAAQ,iBACpCC,aAAc,IAElB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBACjB,EAAKC,UAAY,EAAKA,UAAUD,KAAf,gBACjB,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBAZX,E,iFAgBLG,KAAKb,MAAMK,eACZQ,KAAKC,SAAS,CAACN,aAAe,yBAAKO,GAAG,iBACtC,uBAAGA,GAAG,eAAN,4FAA6G,uBAAGA,GAAG,eAAeC,KAAK,sBAA1B,kBAA7G,KACA,4BAAQD,GAAG,QAAQE,QAASJ,KAAKD,eAAjC,W,kCAKK,IAAD,OACRC,KAAKC,SAAS,CAAEZ,QAAS,eACzBW,KAAKC,SAAS,CAAEX,MAAO,KACvBe,MAAM,wCAAD,OAAyCL,KAAKb,MAAMC,OACxDkB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACF,GAAIA,EAAIE,QACgB,8CAAhBF,EAAIE,QACJ,EAAKR,SAAS,CAACX,MAAO,yBAAKY,GAAG,WAAU,4BAAKK,EAAIE,YAEjD,EAAKR,SAAS,CAACX,MAAO,yBAAKY,GAAG,WAAU,6CAAsB,4BAAKK,EAAIE,iBAI3E,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAII,OAAQD,IAC5B,EAAKZ,UAAUS,EAAIG,IAI3B,EAAKT,SAAS,CAAEZ,QAAS,QAE5BuB,OAAM,SAAAC,GACHC,QAAQC,IAAIF,GACZ,EAAKZ,SAAS,CAAEZ,QAAS,wC,gCAIvB2B,GACU,KAAZA,EAAGC,MAAgBD,EAAGC,KAAKC,SAAS,aAC/BF,EAAGC,KAAKC,SAAS,UAClBF,EAAGC,KAAO,UAAYD,EAAGC,MAE7BjB,KAAKC,SAAS,CAACX,MAAOU,KAAKb,MAAMG,MAAM6B,OAC/B,uBAAGC,IAAKC,KAAKC,MAAsB,IAAhBD,KAAKE,UAAmBC,UAAU,WACjD,yBAAKrB,KAAMa,EAAGC,KAAMO,UAAU,SAASC,IAAKT,EAAGU,WAAYC,IAAM,6BAA+BX,EAAGY,QACnG,6BACA,uBAAGzB,KAAMa,EAAGC,MAAQD,EAAGC,KAAKY,QAAQ,UAAW,IAAIA,QAAQ,WAAY,Y,sCAOvFpC,aAAaqC,QAAQ,iBAAiB,GACtC9B,KAAKC,SAAS,CAAEN,aAAc,O,+BAGxB,IAAD,OAEL,OACI,oCACI,yBAAKO,GAAG,UACJ,yBAAKA,GAAG,UACJ,uBAAGA,GAAG,QAAQC,KAAK,cAAnB,SAEA,wBAAI4B,MAAO,CAAE,MAAS,cAAe,OAAS,MAA9C,kBAEA,uBAAG7B,GAAG,UAAUC,KAAK,sBAArB,8BAGJ,yBAAKqB,UAAU,SACX,2BAAOQ,KAAK,OAAOC,YAAY,oBAAoBC,QAAS,SAAArB,GAAC,OAAI,EAAKZ,SAAS,CAAEb,KAAMyB,EAAEsB,OAAOC,SAAUC,UAAW,SAAAxB,GAAyB,KAAdA,EAAEyB,SAAgB,EAAK1C,eACvJ,4BAAQQ,QAASJ,KAAKJ,WAAtB,QAGR,6BACA,yBAAKmC,MAAO,CAAC,MAAQ,cAAe,UAAa,WAAa/B,KAAKb,MAAME,SACzE,6BAAOW,KAAKb,MAAMG,OAEhBU,KAAKb,MAAMQ,kB,GA9FO4C,aCWrBC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9C,MAAK,SAAA+C,GACjCA,EAAaC,iB","file":"static/js/main.2193d109.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Search extends Component {\n    constructor() {\n        super();\n        this.state = {\n            repo: \"\",\n            loading: \"\",\n            sites: [],\n            amount: 0,\n            okWithCookies: localStorage.getItem('okWithCookies'),\n            cookieBanner: \"\"\n        }\n        this.findLinks = this.findLinks.bind(this);\n        this.loadLinks = this.loadLinks.bind(this);\n        this.acceptCookies = this.acceptCookies.bind(this)\n    }\n\n    componentDidMount() {\n        if (!this.state.okWithCookies) {\n            this.setState({cookieBanner: (<div id=\"cookie-banner\">\n            <p id=\"cookie-text\">By continuing the use of this site, you consent to the use of cookies as outlined in our <a id=\"privacy-link\" href=\"privacypolicy.html\">Privacy Policy</a>.</p>\n            <button id=\"agree\" onClick={this.acceptCookies}>Ok</button>\n        </div>)})\n        }\n    }\n\n    findLinks() {\n        this.setState({ loading: \"Loading...\"} )\n        this.setState({ sites: [] })\n        fetch(`https://techblogsearch.herokuapp.com/${this.state.repo}`)\n        .then(res => res.json())\n        .then(res => {\n            if (res.message) {\n                if (res.message === \"You pressed Go too many times. Chill out.\") {\n                    this.setState({sites: <div id=\"message\"><h3>{res.message}</h3></div>})\n                } else {\n                    this.setState({sites: <div id=\"message\"><h2>Github says: </h2><h3>{res.message}</h3></div>})\n                }\n                \n            } else {\n                for (var i = 0; i < res.length; i++) {\n                    this.loadLinks(res[i])\n                }\n                \n            }\n            this.setState({ loading: \"\"})\n        })\n        .catch(e => {\n            console.log(e);\n            this.setState({ loading: \"Something went horribly wrong.\"})\n        });\n    }\n\n    loadLinks(re) {\n        if (re.blog !== \"\" && !re.blog.includes(\"twitter\")) {\n            if (!re.blog.includes(\"http\")) {\n                re.blog = \"http://\" + re.blog;\n            }\n            this.setState({sites: this.state.sites.concat(\n                    <p key={Math.round(Math.random() * 10000)} className=\"cluster\" >\n                        <img href={re.blog} className=\"avatar\" src={re.avatar_url} alt={ \"github profile picture of \" + re.login } />\n                        <br></br>\n                        <a href={re.blog}>{ re.blog.replace('http://', '').replace('https://', '') }</a>\n                    </p>)\n                })\n        }\n    }\n\n    acceptCookies() {\n        localStorage.setItem('okWithCookies', true);\n        this.setState({ cookieBanner: \"\"});\n    }\n    \n    render() {\n        \n        return (\n            <>\n                <div id=\"search\">\n                    <div id=\"header\">\n                        <a id=\"about\" href=\"about.html\">about</a>\n                        \n                        <h2 style={{ \"color\": \"yellowgreen\", \"margin\":\"0\" }}>techblogsearch</h2>\n                    \n                        <a id=\"privacy\" href=\"privacypolicy.html\">privacy and cookie policy</a>\n                    </div>\n                        \n                    <div className=\"press\">\n                        <input type=\"text\" placeholder=\"github owner/repo\" onInput={e => this.setState({ repo: e.target.value })} onKeyDown={e => { if (e.keyCode === 13) this.findLinks() }}/>\n                        <button onClick={this.findLinks}>Go</button>\n                    </div>\n                </div>\n                <br></br>\n                <div style={{\"color\":\"yellowgreen\", \"textAlign\": \"center\"}}>{ this.state.loading }</div>\n                <div>{ this.state.sites }</div>\n                \n                { this.state.cookieBanner }\n            </>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Search from './Search.js';\n\n\nfunction App() {\n  return (\n    <div>\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}