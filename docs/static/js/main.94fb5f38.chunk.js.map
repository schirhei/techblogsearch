{"version":3,"sources":["Search.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","query","loading","sites","amount","repoList","page","findLinks","bind","getUsers","loadLinks","nextPage","backPage","this","setState","fetch","then","res","json","message","id","total_count","temp","i","items","length","push","full_name","catch","e","console","log","repo","re","blog","includes","concat","key","Math","round","random","className","href","src","avatar_url","alt","login","replace","next","back","onClick","repoTitle","link","style","type","placeholder","onInput","target","value","onKeyDown","keyCode","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.94fb5f38.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Search extends Component {\n    constructor() {\n        super();\n        this.state = {\n            query: \"\",\n            loading: \"\",\n            sites: [],\n            amount: 0,\n            repoList: [],\n            page: -1,\n        }\n        this.findLinks = this.findLinks.bind(this);\n        this.getUsers = this.getUsers.bind(this);\n        this.loadLinks = this.loadLinks.bind(this);\n        this.nextPage = this.nextPage.bind(this);\n        this.backPage = this.backPage.bind(this);\n    }\n\n    findLinks() {\n        this.setState({ page: -1 })\n        this.setState({ repoList: [] })\n        this.setState({ sites: [] })\n        this.setState({ loading: \"Loading...\"} )\n        fetch(`https://techblogsearch.herokuapp.com/${this.state.query}`)\n        .then(res => res.json())\n        .then(res => {\n            if (res.message) {\n                if (res.message === \"You pressed Go too many times. Chill out.\") {\n                    this.setState({sites: <div id=\"message\"><h3>{res.message}</h3></div>})\n                } else {\n                    this.setState({sites: <div id=\"message\"><h2>Github says: </h2><h3>{res.message}</h3></div>})\n                }\n                \n            } else {\n                if (res.total_count !== 0) {\n                    var temp = []\n                    for (var i = 0; i < res.items.length; i++) {\n                        temp.push(res.items[i].full_name)\n                    }\n                    this.setState({repoList: temp, page: 0});\n                    this.getUsers();\n                } else {\n                    this.setState({ loading: \"\"})\n                    this.setState({sites: <div id=\"message\"><h3>No results found.</h3></div>})\n                }\n            }\n            \n        })\n        .catch(e => {\n            console.log(e);\n            this.setState({ loading: \"Something went horribly wrong.\"})\n        });\n    }\n\n    getUsers() {\n        this.setState({ sites: [] })\n        this.setState({ loading: \"Loading...\"})\n        var repo = this.state.repoList[this.state.page];\n        fetch(`https://techblogsearch.herokuapp.com/${repo}`)\n        .then(res => res.json())\n        .then(res => {\n            if (res.length > 0) {\n                for (var i = 0; i < res.length; i++) {\n                    this.loadLinks(res[i])\n                }\n            } else {\n                this.setState({sites: <div id=\"message\"><h3>No blogs here.</h3></div>})\n            }\n            \n            this.setState({ loading: \"\"})\n        })\n        .catch(e => {\n            console.log(e);\n            this.setState({ loading: \"Something went horribly wrong.\"})\n        });\n    }\n\n    loadLinks(re) {\n        if (re.blog !== \"\" && !re.blog.includes(\"twitter\")) {\n            if (!re.blog.includes(\"http\")) {\n                re.blog = \"http://\" + re.blog;\n            }\n            this.setState({sites: this.state.sites.concat(\n                    <p key={Math.round(Math.random() * 10000)} className=\"cluster\" >\n                        <img href={re.blog} className=\"avatar\" src={re.avatar_url} alt={ \"github profile picture of \" + re.login } />\n                        <br></br>\n                        <a href={re.blog}>{ re.blog.replace('http://', '').replace('https://', '') }</a>\n                    </p>)\n                })\n        }\n    }\n\n    nextPage() {\n        var next = this.state.page + 1;\n        this.setState({page : next}, () => this.getUsers())\n    }\n\n    backPage() {\n        var back = this.state.page - 1;\n        this.setState({page : back}, () => this.getUsers());\n    }\n    \n    render() {\n        var next = \"\";\n        var back = \"\";\n        if (this.state.page === 0) {\n            next = (<button onClick={this.nextPage}>Next</button>);\n            back = \"\";\n        }\n        if (this.state.page > 0) {\n            next = (<button onClick={this.nextPage}>Next</button>);\n            back = (<button onClick={this.backPage}>Back</button>);\n        } \n        if (this.state.page === this.state.repoList.length) {\n            next = \"\";\n            back = (<button onClick={this.backPage}>Back</button>)\n        }\n        var repoTitle = \"\";\n        var link = \"\";\n        if (this.state.repoList[this.state.page]) {\n            link = \"https://github.com/\" + this.state.repoList[this.state.page]\n            repoTitle = (<a href={link}>{this.state.repoList[this.state.page]}</a>)\n        }\n        return (\n            <>\n                <div id=\"search\">\n                    <div style={{\"display\":\"flex\", \"justifyContent\":\"center\"}}>\n                        <div id=\"header\">\n                            <a id=\"about\" href=\"about.html\">about</a>\n                            \n                            <h2 style={{ \"color\": \"yellowgreen\", \"margin\":\"0\" }}>techblogsearch</h2>\n                        \n                        </div>\n                    </div>\n                        \n                    <div className=\"press\">\n                        <input type=\"text\" placeholder=\"search\" onInput={e => this.setState({ query: e.target.value })} onKeyDown={e => { if (e.keyCode === 13) this.findLinks() }}/>\n                        <button onClick={this.findLinks}>Go</button>\n                    </div>\n                </div>\n                <br></br>\n                <h3><div id=\"message\"><h3>{repoTitle}</h3></div></h3>\n                <h1 id=\"loading\">{ this.state.loading }</h1>\n                <div>{ this.state.sites }</div>\n                <div id=\"navi\">{ back }{ next }</div>\n            </>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Search from './Search.js';\n\n\nfunction App() {\n  return (\n    <div>\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}