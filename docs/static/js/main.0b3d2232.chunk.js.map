{"version":3,"sources":["Search.js","App.js","serviceWorker.js","index.js"],"names":["Search","state","repo","users","sites","findLinks","bind","this","setState","fetch","then","res","json","message","id","i","length","push","url","r","loadLinks","catch","e","console","log","counter","re","blog","includes","concat","key","Math","round","random","className","href","src","avatar_url","alt","login","replace","style","type","placeholder","onInput","target","value","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8PAEqBA,E,YACjB,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,KAAM,GACNC,MAAO,GACPC,MAAO,IAEX,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBAPP,E,yEAUD,IAAD,OACRC,KAAKC,SAAS,CAACJ,MAAO,KACtBG,KAAKC,SAAS,CAACL,MAAO,KACtBM,MAAM,gCAAD,OAAiCF,KAAKN,MAAMC,KAA5C,kBACJQ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAC,GACF,GAAIA,EAAIE,QACJ,EAAKL,SAAS,CAACJ,MAAO,yBAAKU,GAAG,WAAU,6CAAuBH,EAAIE,gBAEnE,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAIK,OAAQD,IAC5B,EAAKd,MAAME,MAAMc,KAAKN,EAAII,GAAGG,QAIxCR,MAAK,SAAAS,GAAC,OAAI,EAAKC,eACfC,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,Q,kCAGf,IAAD,OACJnB,EAAQI,KAAKN,MAAME,MACvB,GAAIA,EAAMa,OAAS,EAEf,IADA,IAAIS,EAAUtB,EAAMa,OACXD,EAAI,EAAGA,EAAIZ,EAAMa,OAAQD,IAC9BN,MAAMN,EAAMY,IACXL,MAAK,SAAAgB,GAAE,OAAIA,EAAGd,UACdF,MAAK,SAAAgB,GAEc,KAAZA,EAAGC,MAAgBD,EAAGC,KAAKC,SAAS,aAC/BF,EAAGC,KAAKC,SAAS,UAClBF,EAAGC,KAAO,UAAYD,EAAGC,MAE7B,EAAKnB,SAAS,CAACJ,MAAO,EAAKH,MAAMG,MAAMyB,OAC/B,uBAAGC,IAAKC,KAAKC,MAAsB,GAAhBD,KAAKE,UAAgBC,UAAU,WAC9C,yBAAKC,KAAMT,EAAGC,KAAMO,UAAU,SAASE,IAAKV,EAAGW,WAAYC,IAAM,6BAA+BZ,EAAGa,QACnG,6BACA,uBAAGJ,KAAMT,EAAGC,MAAQD,EAAGC,KAAKa,QAAQ,UAAW,IAAIA,QAAQ,WAAY,UAKvE,KADhBf,GAAW,IAEH,EAAKxB,MAAMG,MAAMY,OAAS,GAC1B,EAAKR,SAAS,CAACJ,MAAO,yBAAKU,GAAG,WAAR,4BAIjCO,OAAM,SAAAC,GAAC,OAAIC,QAAQC,IAAIF,Q,+BAM1B,IAAD,OACL,OACI,oCACI,uBAAGR,GAAG,QAAQqB,KAAK,cAAnB,SACA,yBAAKrB,GAAG,UACJ,wBAAI2B,MAAO,CAAE,MAAS,gBAAtB,kBACA,2BAAOC,KAAK,OAAOC,YAAY,aAAYC,QAAS,SAAAtB,GAAC,OAAI,EAAKd,SAAS,CAAEN,KAAMoB,EAAEuB,OAAOC,WACxF,4BAAQC,QAASxC,KAAKF,WAAtB,OAEJ,6BACEE,KAAKN,MAAMG,W,GAzEO4C,aCWrBC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,MAAK,SAAAoD,GACjCA,EAAaC,iB","file":"static/js/main.0b3d2232.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Search extends Component {\n    constructor() {\n        super();\n        this.state = {\n            repo: \"\",\n            users: [],\n            sites: []\n        }\n        this.findLinks = this.findLinks.bind(this)\n    }\n\n    findLinks() {\n        this.setState({sites: []});\n        this.setState({users: []});\n        fetch(`https://api.github.com/repos/${this.state.repo}/contributors`)\n        .then(res => res.json())\n        .then(res => {\n            if (res.message) {\n                this.setState({sites: <div id=\"message\"><h2>Github says: </h2>{res.message}</div>})\n            } else {\n                for (var i = 0; i < res.length; i++) {\n                    this.state.users.push(res[i].url)\n                }\n            }\n        })\n        .then(r => this.loadLinks())\n        .catch(e => console.log(e));\n    }\n\n    loadLinks() {\n        var users = this.state.users;\n        if (users.length > 0) {\n            var counter = users.length;\n            for (var i = 0; i < users.length; i++) {\n                fetch(users[i])\n                .then(re => re.json()) \n                .then(re => {\n                    \n                    if (re.blog !== \"\" && !re.blog.includes(\"twitter\")) {\n                        if (!re.blog.includes(\"http\")) {\n                            re.blog = \"http://\" + re.blog;\n                        }\n                        this.setState({sites: this.state.sites.concat(\n                                <p key={Math.round(Math.random() * 10)} className=\"cluster\" >\n                                    <img href={re.blog} className=\"avatar\" src={re.avatar_url} alt={ \"github profile picture of \" + re.login } />\n                                    <br></br>\n                                    <a href={re.blog}>{ re.blog.replace('http://', '').replace('https://', '') }</a>\n                                </p>)\n                            })\n                    }\n                    counter -= 1;\n                    if (counter === 0) {\n                        if (this.state.sites.length < 1) {\n                            this.setState({sites: <div id=\"message\">There are no blogs!</div>});\n                        }\n                    }\n                })\n                .catch(e => console.log(e))\n\n            }\n        } \n    }\n    \n    render() {\n        return (\n            <>\n                <a id=\"about\" href=\"about.html\">about</a>\n                <div id=\"search\">\n                    <h2 style={{ \"color\": \"yellowgreen\" }}>techblogsearch</h2>\n                    <input type=\"text\" placeholder=\"owner/repo\"onInput={e => this.setState({ repo: e.target.value })} />\n                    <button onClick={this.findLinks}>Go</button>\n                </div>\n                <br></br>\n                { this.state.sites }\n                \n            </>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Search from './Search.js';\n\n\nfunction App() {\n  return (\n    <div>\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}